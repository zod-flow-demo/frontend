import { makeApi, Zodios, type ZodiosOptions } from "@zodios/core";
import { z } from "zod";

{{#if imports}}
{{#each imports}}
import { {{{@key}}} } from "./{{{this}}}"
{{/each}}
{{/if}}


{{#if types}}
{{#each types}}
{{{this}}};
{{/each}}
{{/if}}

{{#each schemas}}
const {{@key}}{{#if (lookup ../circularTypeByName @key)}}: z.ZodType<{{@key}}>{{/if}} = {{{this}}};
{{/each}}

{{#each schemas}}
export type {{@key}} = z.infer<typeof {{@key}}>;
{{/each}}

{{#ifNotEmptyObj schemas}}
export const schemas = {
{{#each schemas}}
  {{@key}},
{{/each}}
};
{{/ifNotEmptyObj}}

const endpoints = makeApi([
{{#each endpoints}}
  {
    method: "{{method}}",
    path: "{{path}}",
    {{#if alias}}
    alias: "{{alias}}",
    {{/if}}
    {{#if description}}
    description: `{{description}}`,
    {{/if}}
    {{#if operationId}}
    alias: `{{operationId}}`,
    {{/if}}
    {{#if requestFormat}}
    requestFormat: "{{requestFormat}}",
    {{/if}}
    {{#if parameters}}
    parameters: [
      {{#each parameters}}
      {
        name: "{{name}}",
        {{#if description}}
        description: `{{description}}`,
        {{/if}}
        {{#if type}}
        type: "{{type}}",
        {{/if}}
        schema: {{{schema}}}
      },
      {{/each}}
    ],
    {{/if}}
    response: {{{response}}},
    {{#if errors.length}}
    errors: [
      {{#each errors}}
      {
        {{#ifeq status "default" }}
        status: "default",
        {{else}}
        status: {{status}},
        {{/ifeq}}
        {{#if description}}
        description: `{{description}}`,
        {{/if}}
        schema: {{{schema}}}
      },
      {{/each}}
    ]
    {{/if}}
  },
{{/each}}
]);

export function createApiClient(baseUrl: string, options?: ZodiosOptions) {
    return new Zodios(baseUrl, endpoints, options);
}
